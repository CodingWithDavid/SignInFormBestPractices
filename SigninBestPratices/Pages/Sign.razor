@page "/signin"

@inject NavigationManager navMgr
@inject IJSRuntime JsInterop
@inject SignInModel user

@layout SigninLayout

<div class="center_parent">
    <div class="center_child">
        <EditForm Model="@user" OnValidSubmit="@HandleValidSubmit" class="signin_form">
            <DataAnnotationsValidator />
            <h2>Sign In</h2>

            <section class="signin_form_section">
                <label class="signin_form_label" for="email">Email</label>
                <InputText id="email" name="email" type="email" autocomplete="username" required autofocus @bind-Value="user.Email" class="defaultFocus" />
                <ValidationMessage For="@(() => user.Email)" />
            </section>
            <section class="signin_form_section">
                <label class="signin_form_label" for="password">Password</label>
                <InputText type=@passwordType id="password" name="password" autocomplete="current-password" required minlength="6" maxlength="32" @bind-Value="user.Password" />
                <button type="button" class=" btn password_show_button" @onclick="ShowPassword">
                    <svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-eye-fill" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                        <path d="M10.5 8a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0z"></path>
                        <path fill-rule="evenodd" d="M0 8s3-5.5 8-5.5S16 8 16 8s-3 5.5-8 5.5S0 8 0 8zm8 3.5a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7z"></path>
                    </svg>
                </button>
                <ValidationMessage For="@(() => user.Password)" />
            </section>
            <button type="submit" class="signin_button">Sign in</button>
        </EditForm>
    </div>
</div>

@code {

    private string passwordType = "password";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            await JsInterop.InvokeVoidAsync("focusInputFromBlazor", new[] { ".defaultFocus" });
        }
    }

    private async Task HandleValidSubmit()
    {
        //call the authh API
        user.LoggedIn = true;
        navMgr.NavigateTo("");
        await Task.CompletedTask;
    }

    private void ShowPassword()
    {
        if (!string.IsNullOrEmpty(user.Password))
        {
            if (passwordType == "password")
            {
                passwordType = "";
            }
            else
            {
                passwordType = "password";
            }
        }
    }

}
